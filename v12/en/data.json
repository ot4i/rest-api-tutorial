{
  "version":"0.6",
  "pageContent": 
  {
    "comments":"Must use underscore for en-us.",
      "navItems":
      {
        "_common":
        {
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
        }
	  }
  },
  "tutorial": 
  { "_common":
    {
      "name":"Using a REST API to manage a set of records",
      "shortDescription":"Learn how to use a REST API with a simple example managing a set of records.",
      "durationText":"This tutorial takes approximately",
      "durationTime":"5 minutes",
	  "resourceToOpen":"CustomerDatabaseV1",
            "helpLink": 
			{
                "text": "IBM Knowledge Center",
           		"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
            }
    },
    "pageDetails":
    {
      "topicsName":"Tutorial Topics",
      "topicList":
      [
        {
          "title":"IBM App Connect Enterprise REST API."
        },
        {
          "title":"Subflows."
        },
        {
          "title":"Transformation using graphical data mapping, Compute and Java Compute nodes."
        }
      ],
      "outcomesName":"Learning outcomes",
      "outcomeList":
      [
        {
          "title":"Understand how a REST API is defined, implemented, deployed, and invoked."
        },
        {
          "title":"Learn how to implement REST API operations by using subflows."
        },
		{
          "title":"Review how Java Compute, Compute and Mapping nodes can handle messages based on JSON objects."
        }
      ],
      "summary":
        {
          "comments":"",
          "overviewName":"OVERVIEW",
          "sections":
          [
            {
            "section":"IBM App Connect Enterprise provides a specific REST API project for developing RESTful web service implementations. These services help you define and implement a RESTful service based on the existing Swagger document. These services, which can be invoked from other standard REST or HTTP clients, allow you to send REST requests and receive responses over HTTP. This tutorial shows a simple example where a REST API service implements several functions to query and manage a sample customer registry."},
            {
            "section":"The REST API description allows you to view the RESTful interface that is defined in the imported Swagger document, and allows easy navigation between the REST API interface editor and the subflows that implement the interface operations. In this example, the REST API defines five operations. Each operation can be invoked by a unique combination of the URL path and HTTP method. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows that use different transformation nodes. The nodes demonstrate how you can use ESQL, Java, or Graphical Mapping to process an incoming JSON message. The subflows also show you how to construct a response message that includes a JSON response object. You can also generate subflows to handle errors that might occur while processing the REST requests and responses."},
            {
            "section":"You will see how you can deploy and test the REST API on the integration node by using a REST client. As you run the example, you will see how the REST API is deployed as a single entity, which packages your solution."
            }
          ]
        },
	  "helpLinks": 
		{
		"title": "Find out more",
		"details" :
		  [
			{
			"title":"Knowledge Center link to ",
			"description":"Developing integration solutions by using REST APIs",
			"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
			"type":"web"
			},
                        {
			"title":"Knowledge Center link to ",
			"description":"Manipulating messages in the JSON domain",
			"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28410_.htm",
			"type":"web"
			}

		  ]
		}
      },
      "pageSteps":
      {
        "create":
        {
          "overview":
          {
            "name":"Create",
            "heading":"Import the REST API project",
            "sections":
            [
              {
                "section":"Click <span class='uicontrol'>Import</span> to add a REST API project called <span class='application'>CustomerDatabaseV1</span> to your workspace."
              },
              {
                "section":"The <span class='application'>CustomerDatabaseV1</span> application consists of a REST API description and other resources, including a number of subflows. You can explore these resources later in the tutorial. The REST API description is opened in the REST API editor."
              },
              {
                "section":"Next, click the <span class='uicontrol'>Prepare</span> tab to see the steps that you complete to deploy the REST API."
              }
            ]
          },
          "helpLinks": 
			{
			"title": "Find out more",
			"details" :
			  [
				{
				"title":"Knowledge Center link to ",
				"description":"Developing integration solutions by using REST APIs",
				"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
				"type":"web"
				}
			  ]
		    },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
        },
        "prepare":
        {
          "overview":
          {
            "comment":"",
            "name":"Prepare",
            "heading":"Deploy the REST API",
            "sections":
            [
			  {
              "section":"Create an integration node by completing the following steps:",				
                "steps":
                {
                "type":"ordered",
                "details":
                  [
                    {
                    "details":"Start a console window, and create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span></code>"
                    },
					{
                    "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                    },
                    {
                    "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                    }
                  ]
                }
              },				
              {
              "section":"Deploy the <span class='application'>CustomerDatabaseV1</span> REST API service by completing the following steps:", 
                "steps":
                {
                "type":"ordered",
                "details":
                  [
					{ 
                      "details":"Drag and drop the <span class='application'>CustomerDatabaseV1</span> application on the integration server to deploy the REST API."
                    },
                    { 
                      "details":"Check that the application deployed with no errors. Your REST API HTTP endpoints should be up and running, waiting for HTTP REST requests to arrive."
                    },
                    {
                      "details":"Find and record the Base URL of the REST API. The way to discover this information varies slightly on different installed ACE fix pack versions. In recent fix packs, find and select the deployed <span class='application'>CustomerDatabaseV1</span> REST API in the <span class='uicontrol'>Integration Explorer</span> view of the Toolkit (by default this is shown in the bottom left corner of the Toolkit), then select the <span class='uicontrol'>Properties</span> view and find the <span class='uicontrol'>REST API Base URL</span> property.<br>Alternatively, right click  your integration node in the <span class='uicontrol'>Integration Explorer</span> view of the Toolkit and choose <span class='uicontrol'>Start Web User Interface</span>. From the web page that opens, select the correct integration server, select the deployed <span class='application'>CustomerDatabaseV1</span> REST API, and find the <span class='uicontrol'>REST API Base URL</span> property. For example, the value you are looking for will be something like this: <span class='userinput'>http://localhost:7800/customerdb/v1</span>"
                    }
                  ]
                }
              },
              {
                "section":"Next, click the <span class='uicontrol'>Run</span> tab to see the steps that you complete to run the REST API."
              }
            ]
          },
          "helpLinks": 
			{
			"title": "Find out more",
			"details" :
			  [
				{
				"title":"Knowledge Center link to ",
				"description":"Developing integration solutions by using REST APIs",
				"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
				"type":"web"
				}
			  ]
		    }
        },
        "run":
        {
          "overview":
          {
            "name":"Run",
            "heading":"Run the REST API",
            "sections":
            [
              {
              "section":"To run the REST API, you need a REST client. If you do not have a dedicated REST client, most browsers, for example Google Chrome or Mozilla Firefox, have REST client extensions or add-ons that you can install in the browser."
              },
              {
              "section":"Call the REST API from a REST client to complete the following tasks:"
              },
			  {
              "section":"<b>Add a customer</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    { 
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers</span><br/> where <span class='varname'>baseURL</span> is the base URL of the REST API that you found in the previous section. For example:<br/><span class='userinput'>http://localhost:7800/customerdb/v1/customers</span>"
                    },
                    {
                      "details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\"firstname\" : \"John\",<br/>\"lastname\" : \"Doe\",<br/>\"address\" : \"123 Main Street\"<br/>}</code>"
                    },
                    {
                      "details":"Select the POST method, and initiate the call. You should see the following response:<br/><span class='msgph'>A new customer with ID <span class='varname'>customerID</span> was successfully added to the database.</span>"
                    }
                  ]
                }
              },
              {
              "section":"<b>List all customers</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    { 
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers</span>"
                    },
                    {
                      "details":"Select the GET method, and initiate the call. You should see a list of all the customers in the database.<br/>"
                    }
                  ]
                }
              },
              {
              "section":"<b>Get the details for a customer</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    { 
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span><br/> where <span class='varname'>customerID</span> is the ID of the customer whose details you want to get. For example:<br/><span class='userinput'>http://localhost:7800/customerdb/v1/customers/3</span>"
                    },
                    { 
                      "details":"Select the GET method, and initiate the call. The response should contain the details of the customer. For example:<br/><span class='msgph'>{\"id\":3,\"firstname\":\"Lyle\",\"lastname\":\"Longino\",\"address\":\"3 The Street, The Town\"}</span>"
                    }
                  ]
                }
              },
              {
              "section":"<b>Update the details for a customer</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    { 
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span>"
                    },
                    {
                      "details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\"firstname\" : \"Lyle\",<br/>\"lastname\" : \"Longino\",<br/>\"address\" : \"123 New Address, New Town\"<br/>}</code><br/> Note: You must specify all fields in the customer record, not just the field that you want to update."
                    },
                    { 
                      "details":"Select the PUT method, and initiate the call. You should see the following response:<br/><span class='msgph'>An existing customer with ID <span class='varname'>customerID</span> was successfully updated in the database.</span>."
                    }
                  ]
                }
              },
			  {
              "section":"<b>Delete a customer</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    { 
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span>"
                    },
                    {
                      "details":"For the header, enter <code>Authorization : secr3t</code>."
                    },
                    { 
                      "details":"Select the DELETE method, and initiate the call. You should see the following response:<br/><span class='msgph'>The customer with the specified ID was successfully deleted from the database.</span>."
                    }
                  ]
                }
              },
              {
              "section":"<b>The following optional steps help you explore and understand the application</b>",
			  "steps":
                {
                "type":"ordered",
                "details":
                  [
                    {
                      "details":"In the Toolkit, a REST API is created from a Swagger document. To see the Swagger document that was used to create this REST API, double-click the <span class='filepath'>swagger.json</span> file under <span class='application'>CustomerDatabaseV1/Other Resources</span> in the <span class='uicontrol'>Application Development</span> view. The file is opened in a text editor."
                    },  
                    {
                      "details":"When you use the Toolkit to create a REST API from a Swagger document, a REST API description is created. From the <span class='application'>CustomerDatabaseV1</span> project, open the REST API Description for the REST API  (if it is not already open). Each URL path/HTTP Method combination is mapped to a logical operation name. From each operation, you can click a link to create a subflow where the operation functionality is defined."
                    }, 
                    {
                      "details":"Click the <span class='uicontrol'>/customers</span> and <span class='uicontrol'>/customers/{customerId}</span> headers to expand and collapse the sections that show all the HTTP methods and operations that are defined for each URL path in this REST API."
                    },
                    {
                      "details":"Click the <span class='uicontrol'>Open the operation</span> links in the header of each operation to open the subflow that implements the operation.",
                      "substeps": 
                         {
                             "type": "unordered",
                             "details": 
                              [
                                 {
                                   "details":"In the subflow that implements the <span class='resource'>addCustomer</span> operation, double-click the Mapping node to see the transformation of the JSON input data using a custom Java class that simulates adding a customer to the registry. Select a Custom Java element in the mapping editor, and look at the Properties view to see the class name and operation that is responsible for performing the task. Click the <span class='uicontrol'>Edit</span> button to view the Java code."
                                 },
                                 {
                                   "details":"In the subflow that implements the <span class='resource'>getAllCustomers</span> operation, double-click the Compute node to see the ESQL code that handles the message created based on the JSON request object and creates the response message for the JSON response object."
                                 },
                                 {
                                   "details":"In the subflow that implements the <span class='resource'>deleteCustomer</span> operation, double-click the Java Compute node to see the code that processes the REST API request and response messages."
                                 }
                              ]
                         }
                    },
                    {
                      "details":"In the <span class='uicontrol'>Error Handling</span> section, click <span class='uicontrol'>Implement the Catch handler</span>, <span class='uicontrol'>Implement the Failure handler</span>, or <span class='uicontrol'>Implement the Timeout handler</span> to create and open a subflow where you can implement error handling logic."
                    }
                  ]
                }
              }
            ]
          },
		  "helpLinks": 
			{
			"title": "Find out more",
			"details" :
			  [
				{
				"title":"Knowledge Center link to ",
				"description":"Developing integration solutions by using REST APIs",
				"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
				"type":"web"
				},
				{
				"title":"Knowledge Center link to ",
				"description":"Manipulating messages in the JSON domain",
				"link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28410_.htm",
				"type":"web"
				}
			  ]
		    }
        } 
      }
    }
  }
